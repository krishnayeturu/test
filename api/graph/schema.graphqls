# GraphQL schema example
#
# https://gqlgen.com/getting-started/

schema {
  query: Query
  mutation: Mutation
}

enum Effect {
  ALLOW
  DENY
}

enum AdmissionPolicyType {
  CREDENTIAL
}

type AdmissionPolicy {
  id: ID!
  name: String!
  effect: Effect
  principal: [String]! # list of PARNs representing various principals - parn:user:::myusername, credential.prod-eng.2nd.watch, etc
  actions: [String]! # credential:Read, credential:Write, admissionPolicy:Read, etc
  resources: [String]! # identifier for what you have access to records-wise -- allow for wildcard - parn:credential:::my-credential-name, parn:user:::some-user-name, etc
}

input AdmissionPolicyInput {
  id: String
  name: String!
  effect: Effect
  principal: [String]! # list of PARNs representing various principals - parn:user:::myusername, credential.prod-eng.2nd.watch, etc
  actions: [String]! # credential:Read, credential:Write, admissionPolicy:Read, etc
  resources: [String]! # identifier for what you have access to records-wise -- allow for wildcard - parn:credential:::my-credential-name, parn:user:::some-user-name, etc
}

type PrincipalAdmissionPolicy {
  principal: String!  # single PARN value representing various principals - parn:user:::myusername, credential.prod-eng.2nd.watch, etc
  admissionPolicy: [AdmissionPolicy]
}

type Query {
  # todos: [Todo!]!
  admissionPolicies(principal: String!): [AdmissionPolicy]
  admissionPolicies(principal: String!, policyType: AdmissionPolicyType!): [AdmissionPolicy]
  admissionPolicies(principal: String!, policyName: String!): [AdmissionPolicy]
}

type Mutation {
  # createTodo(input: NewTodo!): Todo!
  createAdmissionPolicy(admissionPolicy: AdmissionPolicyInput!): AdmissionPolicy
  updateAdmissionPolicy(admissionPolicy: AdmissionPolicyInput!): AdmissionPolicy
  deleteAdmissionPolicy(admissionPolicy: AdmissionPolicyInput!): boolean
}
