// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type AdmissionPolicy struct {
	ID        string    `json:"id"`
	Name      string    `json:"name"`
	Effect    *Effect   `json:"effect"`
	Principal []*string `json:"principal"`
	Actions   []*string `json:"actions"`
	Resources []*string `json:"resources"`
}

type AdmissionPolicyInput struct {
	ID        *string   `json:"id"`
	Name      string    `json:"name"`
	Effect    *Effect   `json:"effect"`
	Principal []*string `json:"principal"`
	Actions   []*string `json:"actions"`
	Resources []*string `json:"resources"`
}

type Login struct {
	Username string `json:"username"`
	Password string `json:"password"`
}

type NewTodo struct {
	Text   string `json:"text"`
	UserID string `json:"userId"`
}

type PrincipalAdmissionPolicy struct {
	Principal       string             `json:"principal"`
	AdmissionPolicy []*AdmissionPolicy `json:"admissionPolicy"`
}

type RefreshTokenInput struct {
	Token string `json:"token"`
}

type User struct {
	ID   string `json:"id"`
	Name string `json:"name"`
}

type AdmissionPolicyType string

const (
	AdmissionPolicyTypeCredential AdmissionPolicyType = "CREDENTIAL"
)

var AllAdmissionPolicyType = []AdmissionPolicyType{
	AdmissionPolicyTypeCredential,
}

func (e AdmissionPolicyType) IsValid() bool {
	switch e {
	case AdmissionPolicyTypeCredential:
		return true
	}
	return false
}

func (e AdmissionPolicyType) String() string {
	return string(e)
}

func (e *AdmissionPolicyType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AdmissionPolicyType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AdmissionPolicyType", str)
	}
	return nil
}

func (e AdmissionPolicyType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Effect string

const (
	EffectAllow Effect = "ALLOW"
	EffectDeny  Effect = "DENY"
)

var AllEffect = []Effect{
	EffectAllow,
	EffectDeny,
}

func (e Effect) IsValid() bool {
	switch e {
	case EffectAllow, EffectDeny:
		return true
	}
	return false
}

func (e Effect) String() string {
	return string(e)
}

func (e *Effect) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Effect(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Effect", str)
	}
	return nil
}

func (e Effect) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
